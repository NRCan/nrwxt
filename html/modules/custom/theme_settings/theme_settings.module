<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\language\ConfigurableLanguageInterface;


/**
 * Implements hook_help().
 */
function theme_settings_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.theme_settings':
      return t('
        <h2>This module includes custom and experimental upgrades as well as some NRCan helper features. </h2>
        <h3>Instructions</h3>
        <p>Enable the features you\'d like on the admin page.</p>
      ');
  }
}


function theme_settings_bootstrap_cards() {
  return \Drupal::config('theme_settings.settings')->get('bootstrap_cards') == 'on';
}

function theme_settings_osdp() {
  return \Drupal::config('theme_settings.settings')->get('osdp') == 'on';
}

function theme_settings_custom_bullets() {
  return \Drupal::config('theme_settings.settings')->get('custom_bullets') == 'on';
}

function theme_settings_match_height() {
  return \Drupal::config('theme_settings.settings')->get('match_height') == 'on';
}


function theme_settings_custom_ga_links() {
  return \Drupal::config('theme_settings.settings')->get('custom_ga_links') == 'on';
}

// --- --- ---

function theme_settings_left_menu() {
  return \Drupal::config('theme_settings.settings')->get('left_menu') == 'on';
}

function theme_settings_admin_css() {
  return \Drupal::config('theme_settings.settings')->get('admin_css') == 'on';
}

function theme_settings_block_update_date() {
  return \Drupal::config('theme_settings.settings')->get('block_update_date') == 'on';
}

/**
 * Implements hook_page_attachments()
 *
 */
function theme_settings_page_attachments(array &$page) {
  if (theme_settings_bootstrap_cards()) {
    $page['#attached']['library'][] = 'theme_settings/cards';
  }
  if (theme_settings_osdp()) {
    $page['#attached']['library'][] = 'theme_settings/osdp';
  }

  if (theme_settings_custom_bullets()) {
    $page['#attached']['library'][] = 'theme_settings/custom-bullets';
  }

  if (theme_settings_match_height()) {
    $page['#attached']['library'][] = 'theme_settings/match-height';
  }

  if (theme_settings_custom_ga_links()) {
    $page['#attached']['library'][] = 'theme_settings/custom-ga-links';
  }

}



/**
 * Implements hook_form_alter().
 */
function theme_settings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (substr($form_id, 0, 5) != 'node_' || substr($form_id, -10) != '_edit_form') {
    return;
  }
  /** @var Drupal\simple_sitemap\Form\FormHelper $f */
  /*
  $f = \Drupal::service('theme_settings.form_helper');
  if (!$f->processForm($form_state)) {
    return;
  }

  $form['block_update_date'] = [
    '#type' => 'details',
    '#group' => isset($form['additional_settings']) ? 'additional_settings' : 'advanced',
    '#title' => t('Updated Date'),
    '#description' => $f->getEntityCategory() === 'instance' ? t('The displayed Updated Date can be overidden.') : '',
    '#weight' => 10,
  ];

  $f->displayEntitySettings($form['block_update_date'])
  // todo: do not show setting when creating new bundle.
    ->displayRegenerateNow($form['block_update_date']);

  // Add submission handler.
  if (isset($form['actions']['submit']['#submit'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action !== 'preview'
        && isset($form['actions'][$action]['#type'])
        && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'theme_settings_block_update_date_form_submit';
      }
    }
  }
  // Fix for account page rendering other submit handlers not usable.
  else {
    $form['#submit'][] = 'theme_settings_block_update_date_form_submit';
  }
*/
}

/**
 * Implements hook_system_breadcrumb_alter()
 *
 * From Open Plus Transport Canada work
 * https://github.com/tc-ca/drupalwxt-internet
 */
function theme_settings_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if (!empty($breadcrumb) && !\Drupal::service('router.admin_context')->isAdminRoute()) {
    $links = $breadcrumb->getLinks();
    array_shift($links);

    // Load the site name out of configuration.
    $config = \Drupal::config('system.site');
    $site_name = $config->get('name'); // This pulls in the current language

    $node = $route_match->getParameter('node');
    $new_links = [];

    // Build the canada.ca "home" link
    $title = 'Canada.ca';
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $url = Url::fromUri('https://www.canada.ca/' . $lang . '.html');
    $new_links[] = Link::fromTextAndUrl(t($title), $url);

    // If not the Institution front page then add the site link
    if (!\Drupal::service('path.matcher')->isFrontPage()) {
      $new_links[] = Link::fromTextAndUrl($site_name, Url::fromRoute('<front>'));
    }

    // remove search from breadcrumb
    if ($route_match->getRouteName() == 'view.site_search.page_1') {
      $links = [];
    }

    $breadcrumb = new Breadcrumb();
    $breadcrumb->setLinks(array_merge($new_links, $links));
    $breadcrumb->addCacheContexts(['route']);
  }
}


/**
 * Form submission handler called in hook_form_alter.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function theme_settings_block_update_date_form_submit($form, FormStateInterface &$form_state) {

  /** @var Drupal\simple_sitemap\Form\FormHelper $f */
  $f = \Drupal::service('theme_settings.form_helper');
  if (!$f->processForm($form_state)) {
    return;
  }

  $values = $form_state->getValues();

  // Fix for values appearing in a sub array on a commerce product entity.
  $values = isset($values['theme_settings']) ? $values['theme_settings'] : $values;

  // Only make changes in DB if sitemap settings actually changed.
  if ($f->valuesChanged($form, $values)) {


  }

}


/**
 * Implements hook_entity_presave().
 */
function theme_settings_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  //if ($entity->getEntityType()->id() == 'page') {}


}


/**
 * Implements hook_init()
 *
 * @link https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_init/7.x
 */
/*function theme_settings_init() {
  if (theme_settings_bootstrap_cards()) {
    drupal_add_css(drupal_get_path('module', 'theme_settings') . '/css/cards.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
  if (theme_settings_left_menu()) {
    drupal_add_css(drupal_get_path('module', 'theme_settings') . '/css/wet_left_menu.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
  if (theme_settings_wet5()) {
    drupal_add_css(drupal_get_path('module', 'theme_settings') . '/css/wet5.css', array('weight' => CSS_THEME));
  }
  if (theme_settings_custom_bullets()) {
    drupal_add_css(drupal_get_path('module', 'theme_settings') . '/css/custom_bullets.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'theme_settings') . '/js/custom_bullets.js', array('type' => 'file', 'scope' => 'footer', 'group' => JS_LIBRARY, 'every_page' => TRUE, 'defer' => TRUE));
  }
  if (theme_settings_custom_ga_links()) {
    //drupal_add_css(drupal_get_path('module', 'theme_settings') . '/css/ga_link.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'theme_settings') . '/js/ga_links.js', array('type' => 'file', 'scope' => 'footer', 'group' => JS_LIBRARY, 'every_page' => TRUE, 'defer' => TRUE));
  }
}*/


/*function theme_settings_preprocess_html(&$variables) {
  global $theme;

  // Modify the Admin theme
  if ($theme === variable_get('admin_theme', 'seven')) {
    if (theme_settings_admin_css()) {
      drupal_add_css(drupal_get_path('module', 'theme_settings') . '/css/admin.css', array('weight' => CSS_THEME));
    }
  }
}*/

/**
 * Implements hook_process_html().
 *
 * Add scripts on overall the site which are defined on the settings page.
 */
/*function theme_settings_process_html(&$variables) {
  global $theme;

  // Don't modify the Admin theme
  if ($theme === variable_get('admin_theme', 'seven')) {
    return;
  }

  // WeT5 goes in the footer
  if (theme_settings_wet5()) {
    $wet5_require = file_create_url(drupal_get_path('module', 'theme_settings').'/wet_boew/stacks/src/require.js');
    $wet5_file = file_create_url(drupal_get_path('module', 'theme_settings').'/wet_boew/stacks/src/wb5');
    $variables['page_bottom'] .= '<script src="'.$wet5_require.'" data-main="'.$wet5_file.'"></script>' . PHP_EOL;
  }

}*/

/*function theme_settings_redirect_alter($redirect) {
  // If the variable "pdfexport" is passed in the url then trigger pdf mode and
  // block redirects so the page loads even if the url has been redirected.
  if(!empty($_REQUEST['pdfexport']) || !empty($_COOKIE['pdfexport'])) {
    unset($redirect->redirect);
  }
}*/


/**
 * Implements hook_language_selection_page_condition_info_alter().
 **/
/*
function theme_settings_language_selection_page_condition_info_alter(&$data) {
  $splash_config = \Drupal::config('theme_settings.splash');
  //$splash_config->get('site_name_en');
  //$splash_config->get('site_name_fr');
  //$splash_config->get('splash_bg');
}
// */


/**
 * Implements hook_theme().
 */
function theme_settings_theme($existing, $type, $theme, $path) {
  dpm([$existing, $type, $theme, $path]);
  ddm([$existing, $type, $theme, $path]);
  if(empty($existing['language_selection_page_content']['variables'])) {
    return;
  }
  //$variables = &$existing['language_selection_page_content']['variables'];
  $splash_config = \Drupal::config('theme_settings.splash');

  //$variables['site_name_en'] = $splash_config->get('site_name_en');
  //$variables['site_name_fr'] = $splash_config->get('site_name_fr');

  return [
    'language_selection_page_content' => [
      'variables' => [
        'site_name_en' => $splash_config->get('site_name_en'),
        'site_name_fr' => $splash_config->get('site_name_fr'),
      ],
    ],
  ];
}
